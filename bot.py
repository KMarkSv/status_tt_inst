import os
import json
import asyncio
import random
import re

import instaloader
import aiohttp
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = '7688474197:AAHMyh4T9-h2nj1dooZodBFpbYX_a-jlXI4'
d_smy = {'–û–¢–ö–†–´–¢–´–ô':'üÜò', '–ü–†–ò–í–ê–¢–ù–´–ô': '‚úÖ'}

PROXIES =[
"http://markkukiko042A6:VPyWzgzJVo@154.216.239.113:49155",
"http://markkukiko042A6:VPyWzgzJVo@203.27.70.200:49155"]
proxy_url = random.choice(PROXIES)
proxies = {
    "http": proxy_url,
    "https": proxy_url
}

USER_AGENT = ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '
              '(KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36')

headers = {
    "x-ig-app-id": "936619743392459",  # ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Instagram –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36",
    "Accept-Language": "en-US,en;q=0.9,ru;q=0.8",
    "Accept-Encoding": "gzip, deflate, br",
    "Accept": "*/*",
}

INSTAGRAM_FILE = 'instagram_accounts.json'
TIKTOK_FILE = 'tiktok_accounts.json'

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ================= UTILS ==================

def load_accounts(filename):
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_accounts(filename, data):
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ============== INSTAGRAM ================


def instagram_check(username):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è

    response = requests.get(f'https://i.instagram.com/api/v1/users/web_profile_info/?username={username}',
                            headers=headers,

                            )
    response_json = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ JSON-–æ–±—ä–µ–∫—Ç
    print(response_json)
    is_private = response_json['data']['user']['is_private']
    print(info)
    status = '–ü–†–ò–í–ê–¢–ù–´–ô' if is_private else '–û–¢–ö–†–´–¢–´–ô'
    return status


async def tiktok_check(username):
    url = f'https://www.tiktok.com/@{username}'
    headers = {
        'User-Agent': USER_AGENT,
        'Accept-Language': 'en-US,en;q=0.9',
    }

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
    print(f"[üåê] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxies}")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url, headers=headers, proxy=proxies, timeout=10) as resp:
                if resp.status != 200:
                    print(f"[‚ùå] TikTok @{username} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {resp.status})")
                    return None
                text = await resp.text()
                if "This account is private" in text or "Account is private" in text:
                    return "–ü–†–ò–í–ê–¢–ù–´–ô"
                else:
                    return "–û–¢–ö–†–´–¢–´–ô"
        except Exception as e:
            print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TikTok @{username}: {e}")
            return None
# =============== –ö–û–ú–ê–ù–î–´ ================
@dp.message(Command('menu'))
@dp.message(Command('start'))
async def cmd_start(message: Message):
    print('start')
    text = ("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram –∏ TikTok.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/info ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞\n"
            "/inst ‚Äî –¥–æ–±–∞–≤–∏—Ç—å Instagram –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "/tiktok ‚Äî –¥–æ–±–∞–≤–∏—Ç—å TikTok –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "<code>/tt_delete &lt;@–Ω–∏–∫–Ω–µ–π–º&gt;</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç TikTok.\n"
            "<code>/ins_delete &lt;@–Ω–∏–∫–Ω–µ–π–º&gt;</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Instagram.\n\n"
            "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤—å –Ω–∏–∫–Ω–µ–π–º –∞–∫–∫–∞—É–Ω—Ç–∞.")
    await message.answer(text, parse_mode="HTML")


@dp.message(Command('tt_delete'))
async def tt_delete(message: Message):
    command_parts = message.text.split()
    accounts = load_accounts(TIKTOK_FILE)  # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    username_to_delete = command_parts[1].lstrip('@')
    if username_to_delete in accounts:
        del accounts[username_to_delete]
        save_accounts(INSTAGRAM_FILE, accounts)
        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username_to_delete} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command('ins_delete'))
async def tt_delete(message: Message):
    command_parts = message.text.split()
    accounts = load_accounts(INSTAGRAM_FILE)
    username_to_delete = command_parts[1].lstrip('@')
    if username_to_delete in accounts:
        del accounts[username_to_delete]
        save_accounts(INSTAGRAM_FILE, accounts)
        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username_to_delete} —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username_to_delete} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@dp.message(Command('inst'))
async def cmd_inst(message: Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∏–∫ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:")
    dp.message.register(instagram_receive_username, F.text)



@dp.message(Command('tiktok'))
async def cmd_tiktok(message: Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∏–∫ TikTok –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.–ü—Ä–∏–º–µ—Ä:@name")
    dp.message.register(tiktok_receive_username, F.text)

# =========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–í–û–î–ê –ù–ò–ö–û–í ============

async def instagram_receive_username(message: Message):
    username = message.text.strip().lstrip('@').lower()
    accounts = load_accounts(INSTAGRAM_FILE)
    if username in accounts:
        await message.answer(f"Instagram –∞–∫–∫–∞—É–Ω—Ç @{username} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
        status = instagram_check(username)
        if status:
            accounts[username] = {
                'status': status,
                'chat_id': message.chat.id
            }
            save_accounts(INSTAGRAM_FILE, accounts)
            await message.answer(f"Instagram –∞–∫–∫–∞—É–Ω—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ Instagram –∞–∫–∫–∞—É–Ω—Ç—É @{username}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def tiktok_receive_username(message: Message):
    username = message.text.strip().lstrip('@').lower()
    accounts = load_accounts(TIKTOK_FILE)
    if username in accounts:
        await message.answer(f"TikTok –∞–∫–∫–∞—É–Ω—Ç @{username} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    else:
        status = await tiktok_check(username)
        if status:
            accounts[username] = {
                'status': status,
                'chat_id': message.chat.id
            }
            save_accounts(TIKTOK_FILE, accounts)
            await message.answer(f"TikTok –∞–∫–∫–∞—É–Ω—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}")
        else:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ TikTok –∞–∫–∫–∞—É–Ω—Ç—É @{username}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# =============== –§–û–ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ===============

async def periodic_instagram_check():
    while True:
        accounts = load_accounts(INSTAGRAM_FILE)
        for username, info in accounts.items():
            current_status = instagram_check(username)
            if current_status and current_status != info['status']:
                chat_id = info['chat_id']
                await bot.send_message(chat_id,
                    f"üîî –ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ @{username}:\n"
                    f"–ë—ã–ª–æ: {d_smy[info['status']]}{info['status']}\n"
                    f"–°—Ç–∞–ª–æ: {d_smy[current_status]}{current_status}")
                accounts[username]['status'] = current_status
                save_accounts(INSTAGRAM_FILE, accounts)
        await asyncio.sleep(120 + 60)  # 10 —á–∞—Å–æ–≤

async def periodic_tiktok_check():
    await asyncio.sleep(15 )  # –∑–∞–¥–µ—Ä–∂–∫–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è —Å–º–µ—â–µ–Ω–∏—è –æ—Ç Instagram
    while True:
        accounts = load_accounts(TIKTOK_FILE)
        for username, info in accounts.items():
            current_status = await tiktok_check(username)
            if current_status and current_status != info['status']:
                chat_id = info['chat_id']
                await bot.send_message(chat_id,
                    f"üîî –ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å TikTok –∞–∫–∫–∞—É–Ω—Ç–∞ @{username}:\n"
                    f"–ë—ã–ª–æ: {d_smy[info['status']]}{info['status']}\n"
                    f"–°—Ç–∞–ª–æ: {d_smy[current_status]}{current_status}")
                accounts[username]['status'] = current_status
                save_accounts(TIKTOK_FILE, accounts)
        await asyncio.sleep(30 * 60)  # 10 —á–∞—Å–æ–≤


@dp.message(Command('info'))
async def info(message:Message):
    accounts = load_accounts(INSTAGRAM_FILE)
    for username, info in accounts.items():
        await message.answer(f"Instagram –∞–∫–∫–∞—É–Ω—Ç @{username}.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {d_smy[info['status']]}{info['status']}")

    accounts = load_accounts(TIKTOK_FILE)
    for username, info in accounts.items():
        await message.answer(f"TikTok –∞–∫–∫–∞—É–Ω—Ç @{username}.\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {d_smy[info['status']]}{info['status']}")

# =============== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===============

async def main():
    dp.message.register(instagram_receive_username, F.text, lambda m: False)  # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

    asyncio.create_task(periodic_instagram_check())
    asyncio.create_task(periodic_tiktok_check())

    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
